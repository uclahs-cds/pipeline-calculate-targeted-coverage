import nextflow.util.SysHelper

// Default inputs/parameters of the pipeline
params {
    max_cpus   = SysHelper.getAvailCpus()
    max_memory = SysHelper.getAvailMemory()

    ucla_cds = true

    // default run_depth_SAMtools params
    min_base_quality = 20

    // default run_merge_BEDtools params
    merge_operation = "collapse"

    // Docker images
    picard_version = "2.27.4"
    samtools_version = "1.15.1"
    pipeval_version = "2.1.6"
    bedtools_version = "2.29.2"

    docker_image_picard = blcdsdockerregistry/picard:${picard_version}
    docker_image_samtools = blcdsdockerregistry/samtools:${samtools_version}
    docker_image_bedtools = blcdsdockerregistry/bedtools:${bedtools_version}
    docker_image_validate = "blcdsdockerregistry/pipeval:${params.pipeval_version}"
    }

// Process specific scope
process {
    // Process results are stored to local cache.
    // If pipeline is launched with the 'resume' option, existing cache results will be used when available
    // rather than re-executing processes
    cache = true

    // Forward process 'stdout' to shell terminal and, consequently, the log file
    echo = true
    executor = 'local'
    
    // Other directives or options that should apply for every process

    // total amount of resources avaible to the pipeline
    cpus = params.max_cpus
    memory = params.max_memory
}

// Enable Docker and configure docker-related options like user and group IDs
docker {
    enabled = true
    // Pass user's UID/GID and group IDs to Docker
    uid_and_gid = "-u \$(id -u):\$(id -g)"
    all_group_ids = "\$(for i in `id --real --groups`; do echo -n \"--group-add=\$i \"; done)"

    runOptions = "${uid_and_gid} ${all_group_ids}"
}
